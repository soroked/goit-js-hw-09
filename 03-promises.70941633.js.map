{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,SAqDvC,SAASC,EAAcC,EAAUC,GAE/B,OADsBC,KAAKC,SAAW,GAG7BC,QAAQC,QAAQ,C,SAAEL,E,MAAUC,IAG5BG,QAAQE,OAAO,C,SAAEN,E,MAAUC,G,CA1DtCL,EAAQW,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAEC,iBAEF,MAAMC,EAAWd,EAAQK,MAAMU,MACzBC,EAAUhB,EAAQiB,KAAKF,MACvBG,EAAYlB,EAAQmB,OAAOJ,MAEjC,IAAIK,EAAK,EAET,MAAMC,EAAYC,YAAW,KAE3B,GAAIF,EAAKF,EAEP,YADAK,aAAaF,GAIf,IAAIG,EAAQC,OAAOX,GAAYW,QAAQL,EAAK,GAAKJ,GAEjDU,QAAQC,IAAIb,GACZY,QAAQC,IAAIX,GACZU,QAAQC,IAAIH,GAEZrB,EAAciB,EAAII,GACfI,MAAK,EAACxB,SAACA,EAAQC,MAAEA,KAAWP,EAAA+B,OAAOC,QAAQ,uBAAqB1B,QAAiBC,SAAY0B,OAC3F,EAAK3B,WAASC,WAAaP,EAAA+B,OAAMG,QAAC,sBAAS5B,QAAgCC,SAE9Ee,GAAI,EAEN,MAAMa,EAAaC,aAAY,KAC7B,GAAId,EAAKF,EAEP,YADAiB,cAAcF,GAIhB,IAAIG,EAAQX,OAAOX,GAAYW,QAAQL,EAAK,GAAKJ,GAEjDU,QAAQC,IAAIb,GACZY,QAAQC,IAAIX,GACZU,QAAQC,IAAIS,GAEZjC,EAAciB,EAAIgB,GACfR,MAAK,EAACxB,SAACA,EAAQC,MAAEA,KAAWP,EAAA+B,OAAOC,QAAQ,uBAAqB1B,QAAiBC,SAAY0B,OAC3F,EAAK3B,WAASC,WAAaP,EAAA+B,OAAMG,QAAC,sBAAS5B,QAA8BC,SAE9Ee,GAAM,CAAC,GACNJ,EAAQ,GACVF,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  const delayRef = formRef.delay.value;\n  const stepRef = formRef.step.value\n  const amountRef = formRef.amount.value;\n\n  let id = 1;\n\n  const timeoutId = setTimeout(() => {\n\n    if (id > amountRef) {\n      clearTimeout(timeoutId);\n      return;\n    }\n\n    let delay = Number(delayRef) + Number((id - 1) * stepRef);\n\n    console.log(delayRef);\n    console.log(stepRef);\n    console.log(delay);\n\n    createPromise(id, delay)\n      .then(({position, delay}) => Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n      .catch(({position, delay}) => Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n\n    id += 1;\n\n    const intervalId = setInterval(() => {\n      if (id > amountRef) {\n        clearInterval(intervalId);\n        return;\n      }\n\n      let delay = Number(delayRef) + Number((id - 1) * stepRef);\n\n      console.log(delayRef);\n      console.log(stepRef);\n      console.log(delay);\n\n      createPromise(id, delay)\n        .then(({position, delay}) => Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n        .catch(({position, delay}) => Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n      \n      id += 1;\n    }, stepRef)\n  }, delayRef);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n    return Promise.resolve({ position, delay });\n  } else {\n    // Reject\n    return Promise.reject({ position, delay });\n  }\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Math","random","Promise","resolve","reject","addEventListener","e","preventDefault","delayRef","value","stepRef","step","amountRef","amount","id","timeoutId","setTimeout","clearTimeout","delay1","Number","console","log","then","Notify","success","catch","failure","intervalId","setInterval","clearInterval","delay2"],"version":3,"file":"03-promises.70941633.js.map"}