{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAc,SA6CvC,SAASC,EAAcC,EAAUC,GAE/B,OADsBC,KAAKC,SAAW,GAG7BC,QAAQC,QAAQ,CAAEL,WAAUC,UAG5BG,QAAQE,OAAO,CAAEN,WAAUC,S,CAlDtCL,EAAQW,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAEC,iBAEF,IAAMC,EAAWd,EAAQK,MAAMU,MACzBC,EAAUhB,EAAQiB,KAAKF,MACvBG,EAAYlB,EAAQmB,OAAOJ,MAE7BK,EAAK,EAEHC,EAAYC,YAAW,WAE3B,GAAIF,EAAKF,EACPK,aAAaF,OADf,CAKA,IAAIG,EAAQC,OAAOX,GAAYW,QAAQL,EAAK,GAAKJ,GAEjDb,EAAciB,EAAII,GACfE,MAAK,SAAAC,G,IAAEvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,M,OAAWP,EAAA8B,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IACvF0B,OAAI,SAAAJ,G,IAAEvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,M,OAAWP,EAAA8B,OAAOI,QAAQ,sBAAuCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAE1Fe,GAAI,EAEN,IAAMa,EAAaC,aAAY,WAC7B,GAAId,EAAKF,EACPiB,cAAcF,OADhB,CAKA,IAAIG,EAAQX,OAAOX,GAAYW,QAAQL,EAAK,GAAKJ,GAEjDb,EAAciB,EAAIgB,GACfV,MAAK,SAAAC,G,IAAEvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,M,OAAWP,EAAA8B,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IACvF0B,OAAI,SAAAJ,G,IAAEvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,M,OAAWP,EAAA8B,OAAOI,QAAQ,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAE1Fe,GAAM,C,IACLJ,E,IACFF,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  const delayRef = formRef.delay.value;\n  const stepRef = formRef.step.value\n  const amountRef = formRef.amount.value;\n\n  let id = 1;\n\n  const timeoutId = setTimeout(() => {\n\n    if (id > amountRef) {\n      clearTimeout(timeoutId);\n      return;\n    }\n\n    let delay = Number(delayRef) + Number((id - 1) * stepRef);\n\n    createPromise(id, delay)\n      .then(({position, delay}) => Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n      .catch(({position, delay}) => Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n\n    id += 1;\n\n    const intervalId = setInterval(() => {\n      if (id > amountRef) {\n        clearInterval(intervalId);\n        return;\n      }\n\n      let delay = Number(delayRef) + Number((id - 1) * stepRef);\n\n      createPromise(id, delay)\n        .then(({position, delay}) => Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`))\n        .catch(({position, delay}) => Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n      \n      id += 1;\n    }, stepRef)\n  }, delayRef);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n    return Promise.resolve({ position, delay });\n  } else {\n    // Reject\n    return Promise.reject({ position, delay });\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Math","random","Promise","resolve","reject","addEventListener","e","preventDefault","delayRef","value","stepRef","step","amountRef","amount","id","timeoutId","setTimeout","clearTimeout","delay1","Number","then","param","Notify","success","concat","catch","failure","intervalId","setInterval","clearInterval","delay2"],"version":3,"file":"03-promises.7706e6d0.js.map"}